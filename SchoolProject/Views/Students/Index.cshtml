@model IEnumerable<SchoolProject.Models.Student>

@{
    ViewBag.Title = "Students";
    var roleId = ViewBag.RoleId != null ? (int)ViewBag.RoleId : -1;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        body {
            color: #ffffff; /* Default text color */
            margin: 0; /* Remove default margin */
            background: url('/images/pen.jpg') no-repeat center center fixed;
            background-size: cover;
            font-family: Arial, sans-serif;
        }

        .header-buttons {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

            .header-buttons .btn {
                border-radius: 50px; /* Yuvarlak köşeler */
                padding: 10px 20px; /* İç boşluk */
                font-size: 16px; /* Yazı boyutu */
                display: flex;
                align-items: center;
                gap: 8px; /* İkon ve metin arasındaki boşluk */
            }

        .btn-back {
            background-color: #007bff; /* Daha parlak mavi */
            color: white; /* Beyaz metin rengi */
            border: none; /* Kenar çizgisi yok */
        }

        .btn-add {
            background-color: #28a745; /* Daha parlak yeşil */
            color: white; /* Beyaz metin rengi */
            border: none; /* Kenar çizgisi yok */
        }

            .btn-back:hover, .btn-add:hover {
                opacity: 0.9; /* Hover efekti */
            }

        .table {
            border-radius: 8px; /* Yuvarlak köşeler */
            overflow: hidden; /* Kenarları yuvarlak yapma */
            box-shadow: 0 4px 8px rgba(0,0,0,0.1); /* Hafif gölge */
            background-color: rgba(255, 255, 255, 0.8); /* Beyaz arka plan, %80 opaklık */
        }

            .table thead th {
                background-color: #f8f9fa; /* Açık gri başlık arka planı */
                color: #495057; /* Koyu gri başlık metin rengi */
                border-bottom: 2px solid #dee2e6; /* Belirgin başlık kenarı */
            }

            .table tbody tr:hover {
                background-color: #f1f1f1; /* Hover efekti */
            }

            .table td, .table th {
                padding: 15px; /* İç boşluk */
            }

            .table td {
                vertical-align: middle; /* Orta hizalama */
            }

            .table tbody td {
                border-top: 1px solid #dee2e6; /* Satır kenarı */
            }

        /* Buton stilleri */
        .btn-edit, .btn-details, .btn-delete {
            border-radius: 25px; /* Yuvarlak köşeler */
            padding: 8px 16px; /* İç boşluk */
            font-size: 14px; /* Yazı boyutu */
            text-transform: uppercase; /* Büyük harf yap */
            font-weight: bold; /* Kalın yazı */
            color: white; /* Beyaz metin rengi */
            border: none; /* Kenar çizgisi yok */
            margin-right: 5px; /* Butonlar arasında boşluk */
        }

        .btn-edit {
            background-color: #007bff; /* Mavi */
        }

            .btn-edit:hover {
                background-color: #0056b3; /* Daha koyu mavi */
            }

        .btn-details {
            background-color: #ffc107; /* Sarı */
        }

            .btn-details:hover {
                background-color: #e0a800; /* Daha koyu sarı */
            }

        .btn-delete {
            background-color: #dc3545; /* Kırmızı */
        }

            .btn-delete:hover {
                background-color: #c82333; /* Daha koyu kırmızı */
            }

        /* Modal Styles */
        .modal-content {
            border: 2px solid #dc3545; /* Kırmızı çerçeve */
            border-radius: 8px; /* Yuvarlak köşeler */
        }

        .modal-header {
            background-color: #dc3545; /* Kırmızı başlık arka planı */
            color: white; /* Beyaz metin rengi */
        }

        .modal-body {
            color: black; /* Siyah metin rengi */
        }

        .modal-footer .btn {
            border-radius: 25px; /* Yuvarlak köşeler */
            padding: 8px 16px; /* İç boşluk */
            font-size: 14px; /* Yazı boyutu */
        }

        .btn-secondary {
            background-color: #6c757d; /* Gri */
        }

            .btn-secondary:hover {
                background-color: #5a6268; /* Daha koyu gri */
            }
    </style>
</head>
<body>
    <div class="container">
        <div class="header-buttons">
            <a href="@Url.Action("Index", "Home")" class="btn btn-back">
                <i class="fas fa-arrow-left"></i> Back
            </a>
            @if (roleId != 2)
            {
                <a href="@Url.Action("Create")" class="btn btn-add">
                    <i class="fas fa-plus"></i> Add New Student
                </a>
            }
        </div>

        <h2>Students</h2>

        <table class="table">
            <thead>
                <tr>
                    <th>Student Name</th>
                    <th>Courses</th>
                    <th>Teachers</th>
                    <th>Is Active</th>
                    <th>Created Date</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var student in Model)
                {
                    <tr>
                        <td>@student.StudentName</td>
                        <td>
                            @if (student.StudentCourses != null && student.StudentCourses.Any())
                            {
                                var courses = student.StudentCourses
                                                      .Select(sc => sc.Course)
                                                      .Where(c => c != null && !(bool)c.IsDeleted)
                                                      .GroupBy(c => c.CourseId)
                                                      .Select(g => g.First());

                                if (courses.Any())
                                {
                                    foreach (var course in courses)
                                    {
                                        @course.CourseName <br />
                                    }
                                }
                                else
                                {
                                    <span>No Course Assigned</span>
                                }
                            }
                            else
                            {
                                <span>No Course Assigned</span>
                            }
                        </td>
                        <td>
                            @if (student.StudentCourses != null && student.StudentCourses.Any())
                            {
                                var studentCourses = student.StudentCourses
                                                             .Where(sc => sc.Course != null && !(bool)sc.Course.IsDeleted)
                                                             .ToList();

                                if (studentCourses.Any())
                                {
                                    bool anyTeacherAssigned = false; // Flag to track if any teacher is assigned

                                    foreach (var studentCourse in studentCourses)
                                    {
                                        var teacher = studentCourse.Teacher;

                                        if (teacher != null && !(bool)studentCourse.IsDeleted)
                                        {
                                            @teacher.TeacherName <br />
                                            anyTeacherAssigned = true;
                                        }
                                    }

                                    if (!anyTeacherAssigned)
                                    {
                                        <span>No Teacher Assigned</span>
                                    }
                                }
                                else
                                {
                                    <span>No Teacher Assigned</span>
                                }
                            }
                            else
                            {
                                <span>No Teacher Assigned</span>
                            }
         

                    </td>
                        <td>@((student.IsActive ?? false) ? "Yes" : "No")</td>
                        <td>@(student.CreatedDate.HasValue ? student.CreatedDate.Value.ToString("dd-MM-yyyy") : "")</td>
                        <td>
                            @Html.ActionLink("Edit", "Edit", new { id = student.StudentId }, new { @class = "btn btn-edit" })
                            @Html.ActionLink("Details", "Details", new { id = student.StudentId }, new { @class = "btn btn-details" })
                            @if (roleId != 2)
                            {
                                <button class="btn btn-delete" data-toggle="modal" data-target="#deleteModal"
                                        data-id="@student.StudentId"
                                        data-name="@student.StudentName">
                                    Delete
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-delete" disabled>Delete</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="deleteModal" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteModalLabel">Delete Confirmation</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this student named <strong id="studentName"></strong>?
                </div>
                <div class="modal-footer">
                    <form id="deleteForm" method="post" action="">
                        @Html.AntiForgeryToken()
                        <input type="hidden" id="studentId" name="id" value="" />
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-danger">Delete</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script>
        $('#deleteModal').on('show.bs.modal', function (event) {
            var button = $(event.relatedTarget); // Button that triggered the modal
            var studentId = button.data('id'); // Extract info from data-* attributes
            var studentName = button.data('name'); // Extract student name from data-* attributes
            var actionUrl = '@Url.Action("Delete", "Students")'; // Create action URL

            var modal = $(this);
            modal.find('#studentId').val(studentId); // Set student ID to hidden input
            modal.find('#studentName').text(studentName); // Set student name in modal body
            //modal.find('form').attr('action', actionUrl); // Set form action URL
            modal.find('#deleteForm').attr('action', '/Students/Delete/' + studentId);
        });
    </script>
</body>
</html>
